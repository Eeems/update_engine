#!/bin/bash
# Copyright (c) 2014 The CoreOS Authors.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

set -e
umask 0022

OEM_MNT="/usr/share/oem"

INSTALL_MNT=$(dirname "$0")
INSTALL_DEV="$1"
INSTALL_KERNEL=""

for arg in "$@"; do
    case "${arg}" in
        KERNEL=*) INSTALL_KERNEL="${arg#KERNEL=}" ;;
    esac
done

# Figure out if the slot id is A or B
INSTALL_LABEL=$(blkid -o value -s PARTLABEL "${INSTALL_DEV}")
case "${INSTALL_LABEL}" in
    ROOT-A|USR-A)
        SLOT=A;;
    ROOT-B|USR-B)
        SLOT=B;;
    *)
        echo "Unknown LABEL ${INSTALL_LABEL}" >&2
        exit 1
esac

# Find the ESP partition and mount it if needed
ESP_PARTTYPE="c12a7328-f81f-11d2-ba4b-00a0c93ec93b"
ESP_MNT=

declare -a DEV_LIST
mapfile DEV_LIST < <(lsblk -P -o NAME,PARTTYPE,MOUNTPOINT)

for dev_info in "${DEV_LIST[@]}"; do
    eval "$dev_info"

    if [[ "${PARTTYPE}" != "${ESP_PARTTYPE}" ]]; then
        continue
    fi

    if [[ -n "${MOUNTPOINT}" ]]; then
        ESP_MNT="${MOUNTPOINT}"
    else
        ESP_MNT="$(mktemp -d /tmp/postinst_esp.XXXXXXXXXX)"
        mount "/dev/${NAME}" "${ESP_MNT}"
        trap "umount '${ESP_MNT}' && rmdir '${ESP_MNT}'" EXIT
    fi

    break
done

if [[ -z "${ESP_MNT}" ]]; then
    echo "Failed to find ESP partition!" >&2
    exit 1
fi

if [[ ! -d "${ESP_MNT}" ]]; then
    echo "ESP partition mount point (${ESP_MNT}) is not a directory!" >&2
    exit 1
fi

# Update bootloaders from CoreOS <= 522.x.x
if grep -q cros_legacy /proc/cmdline; then
    # Update kernel and bootloader configs
    mkdir -p "${ESP_MNT}"{/syslinux,/boot/grub}
    cp -v "${INSTALL_MNT}/boot/vmlinuz" \
        "${ESP_MNT}/syslinux/vmlinuz.${SLOT}"
    cp -v "${INSTALL_MNT}/boot/syslinux/root.${SLOT}.cfg" \
        "${ESP_MNT}/syslinux/root.${SLOT}.cfg"

    # For Xen's pvgrub
    cp -v "${INSTALL_MNT}/boot/grub/menu.lst.${SLOT}" \
        "${ESP_MNT}/boot/grub/menu.lst"

    # For systems that have disabled boot_kernel and kexec
    if ! grep -q boot_kernel "${ESP_MNT}/syslinux/default.cfg"; then
        cp -v "${INSTALL_MNT}/boot/syslinux/default.cfg.${SLOT}" \
            "${ESP_MNT}/syslinux/default.cfg"
    fi
elif [[ -z "${INSTALL_KERNEL}" ]]; then
    # not a legacy system but update_engine didn't handle the kernel.
    # kernel names are in lower case, ${SLOT,,} converts the slot name
    cp -v "${INSTALL_MNT}/boot/vmlinuz" \
       "${ESP_MNT}/remarkable/vmlinuz-${SLOT,,}"
fi

# use the fw_setenv binary from the image to ensure compatibility
FW_SETENV=
for bindir in bin/old_bins bin sbin; do
    if [[ -x "${INSTALL_MNT}/${bindir}/fw_setenv" ]]; then
        FW_SETENV="${INSTALL_MNT}/${bindir}/fw_setenv"
        break
    fi
done
if [[ -z "${FW_SETENV}" ]]; then
    echo "Failed to locate the fw_setenv binary in ${INSTALL_MNT}" >&2
    exit 1
fi

FW_PRINTENV=
for bindir in bin/old_bins bin sbin; do
    if [[ -x "${INSTALL_MNT}/${bindir}/fw_printenv" ]]; then
        FW_PRINTENV="${INSTALL_MNT}/${bindir}/fw_printenv"
        break
    fi
done
if [[ -z "${FW_PRINTENV}" ]]; then
    echo "Failed to locate the fw_printenv binary in ${INSTALL_MNT}" >&2
    exit 1
fi

# locate the dynamic linker
LDSO=
for l in "${INSTALL_MNT}"/lib*/ld-2.??.so; do
    if [[ -x "$l" ]]; then
        LDSO="$l"
        break
    fi
done
if [[ -z "${LDSO}" ]]; then
    echo "Failed to locate ld.so in ${INSTALL_MNT}" >&2
    exit 1
fi
LIBS="${LDSO%/*}"

call_fw_setenv() {
    "${LDSO}" --library-path "${LIBS}" "${FW_SETENV}" -c "${INSTALL_MNT}/etc/fw_env.config" "$@"
}
call_fw_printenv() {
    "${LDSO}" --library-path "${LIBS}" "${FW_PRINTENV}" -c "${INSTALL_MNT}/etc/fw_env.config" "$@"
}

call_fw_setenv "upgrade_available" "1"

OLDROOT=$(call_fw_printenv -n mmcroot)
if [[ "${OLDROOT}" == "${INSTALL_DEV}" ]]; then
    echo "WARNING: We're installing over our current root"
else
    call_fw_setenv "mmcfallbackroot" "${OLDROOT}"
    call_fw_setenv "mmcroot" "${INSTALL_DEV}"
fi

cat "${INSTALL_MNT}/share/remarkable/release"
echo "Setup ${INSTALL_LABEL} (${INSTALL_DEV}) for next boot."
